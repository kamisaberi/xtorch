{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#motivation","title":"Motivation","text":"<p>PyTorch\u2019s C++ library (LibTorch) emerged as a powerful way to use PyTorch outside Python, but after 2019 it became challenging for developers to use it for end-to-end model development. Early on, LibTorch aimed to mirror the high-level Python API, yet many convenient abstractions and examples never fully materialized or were later removed.</p> <p>As of 2020, the C++ API had achieved near feature-parity with Python\u2019s core operations, but it lagged in usability and community support. Fewer contributors focused on C++ meant that only low-level building blocks were provided, with high-level components (e.g. ready-made network architectures, datasets) largely absent. This left C++ practitioners to rewrite common tools from scratch \u2013 implementing standard models or data loaders manually \u2013 which is time-consuming and error-prone.</p> <p>Another factor was PyTorch\u2019s emphasis on the Python-to-C++ workflow. The official recommended path for production was to prototype in Python, then convert models to TorchScript for C++ deployment. This approach deprioritized making the pure C++ experience as friendly as Python\u2019s.</p> <p>As a result, developers who preferred or needed to work in C++ (for integration with existing systems, performance, or deployment constraints) found LibTorch cumbersome. Simple tasks like data augmentation (e.g. random crops or flips) had no built-in support in LibTorch C++. Defining neural network modules in C++ involved boilerplate macros and manual registration, an awkward process compared to Python\u2019s concise syntax. Crucial functionality for model serialization was limited \u2013 for instance, LibTorch could load Python-exported models but not easily export its own models to a portable format.</p> <p>xTorch was created to address this gap. It is a C++ library that extends LibTorch with the high-level abstractions and utilities that were missing or removed after 2019. By building on LibTorch\u2019s robust computational core, xTorch restores ease-of-use without sacrificing performance. The motivation is to empower C++ developers with a productive experience similar to PyTorch in Python \u2013 enabling them to build, train, and deploy models with minimal fuss. In essence, xTorch revives and modernizes the \u201cbatteries-included\u201d ethos for C++ deep learning, providing an all-in-one toolkit where the base library left off.</p>"},{"location":"#design-and-architecture","title":"Design and Architecture","text":"<p>xTorch is architected as a thin layer on top of LibTorch\u2019s C++ API, carefully integrating with it rather than reinventing it. The design follows a modular approach, adding a higher-level API that wraps around LibTorch\u2019s lower-level classes. At its core, xTorch relies on LibTorch for tensor operations, autograd, and neural network primitives \u2013 effectively using LibTorch as the computational engine. The extended library then introduces its own set of C++ classes that encapsulate common patterns (model definitions, training loops, data handling, etc.), providing a cleaner interface to the developer.</p>"},{"location":"#architecture-layers","title":"Architecture Layers","text":"<ul> <li>LibTorch Core (Bottom Layer): Provides <code>torch::Tensor</code>, <code>torch::autograd</code>, <code>torch::nn</code>, optimizers, etc.</li> <li>Extended Abstraction Layer (Middle): Simplified classes inheriting from LibTorch core (e.g., <code>ExtendedModel</code>, <code>Trainer</code>).</li> <li>User Interface (Top Layer): Intuitive APIs and boilerplate-free interaction.</li> </ul>"},{"location":"#modules","title":"Modules","text":"<ul> <li>Model Module: High-level model class extensions.</li> <li>Data Module: Enhanced datasets and DataLoader.</li> <li>Training Module: Training logic, checkpointing, metrics.</li> <li>Utilities Module: Logging, device helpers, summaries.</li> </ul>"},{"location":"#features-and-enhancements","title":"Features and Enhancements","text":"<ul> <li>High-Level Model Classes: <code>XTModule</code>, prebuilt models like <code>ResNetExtended</code>, <code>XTCNN</code>.</li> <li>Simplified Training Loop (Trainer): Full training abstraction with callbacks and metrics.</li> <li>Enhanced Data Handling: <code>ImageFolderDataset</code>, <code>CSVDataset</code>, OpenCV-backed support.</li> <li>Utility Functions: Logging, metrics, summary, device utils.</li> <li>Extended Optimizers: AdamW, RAdam, schedulers, learning rate strategies.</li> <li>Model Serialization &amp; Deployment: <code>save_model()</code>, <code>export_to_jit()</code>, inference helpers.</li> </ul>"},{"location":"#use-cases-and-examples","title":"Use Cases and Examples","text":""},{"location":"#example-cnn-training-pipeline-simplified","title":"Example: CNN Training Pipeline (Simplified)","text":"<pre><code>#include &lt;xtorch/xtorch.hpp&gt;\n\nint main() {\n    std::cout.precision(10);\n    auto dataset = xt::data::datasets::MNIST(\n        \"/home/kami/Documents/temp/\", DataMode::TRAIN, true,\n        {\n            xt::data::transforms::Resize({32, 32}),\n            torch::data::transforms::Normalize&lt;&gt;(0.5, 0.5)\n        }).map(torch::data::transforms::Stack&lt;&gt;());\n\n\n    xt::DataLoader&lt;decltype(dataset)&gt; loader(\n        std::move(dataset),\n        torch::data::DataLoaderOptions().batch_size(64).drop_last(false),\n        true);\n\n    xt::models::LeNet5 model(10);\n    model.to(torch::Device(torch::kCPU));\n    model.train();\n\n    torch::optim::Adam optimizer(model.parameters(), torch::optim::AdamOptions(1e-3));\n\n    xt::Trainer trainer;\n    trainer.set_optimizer(&amp;optimizer)\n            .set_max_epochs(5)\n            .set_loss_fn([](auto output, auto target) {\n                return torch::nll_loss(output, target);\n            });\n\n    trainer.fit&lt;decltype(dataset)&gt;(&amp;model, loader);\n\n    return 0;\n}\n</code></pre>"},{"location":"#example-c-inference-pipeline","title":"Example: C++ Inference Pipeline","text":"<pre><code>auto model = xt::load_model(\"resnet18_script.pt\");\nauto tensor = xt::utils::imageToTensor(\"input.jpg\");\nauto outputs = xt::utils::predict(model, tensor);\nint predictedClass = xt::utils::argmax(outputs);\nstd::cout &lt;&lt; \"Predicted class = \" &lt;&lt; predictedClass &lt;&lt; std::endl;\n</code></pre>"},{"location":"#impact-and-potential-applications","title":"Impact and Potential Applications","text":"<ul> <li>C++ Developers: Enables use of PyTorch-like training without Python.</li> <li>Research in Embedded / HPC: Pure C++ training and deployment possible.</li> <li>Industrial Use: On-device training, edge deployment workflows.</li> <li>Education: Useful for teaching performance-aware ML in C++.</li> <li>Ecosystem Growth: Boosts community contributions, reuse, and experimentation.</li> </ul>"},{"location":"#comparison-with-related-tools","title":"Comparison with Related Tools","text":"Feature LibTorch xTorch PyTorch Lightning (Python) Training Loop Abstraction \u274c \u2705 \u2705 Data Augmentation Built-in \u274c \u2705 \u2705 Built-in Model Zoo Limited \u2705 \u2705 Target Language C++ C++ Python TorchScript Export Limited \u2705 \u2705 <p>xTorch complements PyTorch\u2019s C++ API like PyTorch Lightning does in Python, enabling expressive ML development in C++ with clean, modular code structures.</p>"},{"location":"api/","title":"API","text":""},{"location":"contributing/","title":"Contributing","text":""},{"location":"examples/","title":"Examples","text":""},{"location":"features/","title":"Features","text":""},{"location":"license/","title":"License","text":""},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"api/cpp/core_classes/","title":"core_classes.md","text":""},{"location":"api/cpp/native/","title":"native.md","text":""},{"location":"api/cpp/tensor/","title":"tensor.md","text":""},{"location":"api/python/core/","title":"core.md","text":""},{"location":"api/python/nn/","title":"nn.md","text":""},{"location":"api/python/optim/","title":"optim.md","text":""},{"location":"api/python/utils/","title":"utils.md","text":""},{"location":"community/code_of_conduct/","title":"code_of_conduct.md","text":""},{"location":"community/faq/","title":"faq.md","text":""},{"location":"developer/benchmarks/","title":"benchmarks.md","text":""},{"location":"developer/contributing/","title":"contributing.md","text":""},{"location":"developer/testing/","title":"testing.md","text":""},{"location":"ecosystem/integration/","title":"integration.md","text":""},{"location":"ecosystem/nlp/","title":"nlp.md","text":""},{"location":"ecosystem/vision/","title":"vision.md","text":""},{"location":"getting_started/installation/","title":"xTorch Installation Guide","text":""},{"location":"getting_started/installation/#supported-operating-systems","title":"Supported Operating Systems","text":"<p>xTorch supports the following Linux distributions: - Ubuntu - Linux Mint - Manjaro (Arch-based)</p>"},{"location":"getting_started/installation/#step-1-install-required-packages","title":"Step 1: Install Required Packages","text":""},{"location":"getting_started/installation/#on-ubuntu-linux-mint","title":"On Ubuntu / Linux Mint","text":"<pre><code>sudo apt-get update\nsudo apt-get install -y libcurl4-openssl-dev libopencv-dev zlib1g-dev libssl-dev \\\n    liblzma-dev libarchive-dev libtar-dev libzip-dev libsndfile1-dev \\\n    build-essential cmake git\n</code></pre>"},{"location":"getting_started/installation/#on-manjaro-arch","title":"On Manjaro / Arch","text":"<pre><code>sudo pacman -Syu --needed curl opencv zlib openssl xz libarchive libtar libzip libsndfile base-devel cmake git\n</code></pre>"},{"location":"getting_started/installation/#step-2-download-and-install-libtorch-pytorch-c","title":"Step 2: Download and Install LibTorch (PyTorch C++)","text":"<ol> <li>Go to: https://pytorch.org/get-started/locally/</li> <li>Choose:<ul> <li>Stable</li> <li>Linux</li> <li>Language: C++/Java</li> <li>Compute Platform: CPU or CUDA</li> </ul> </li> <li>Download and extract the <code>libtorch</code> archive:</li> </ol> <pre><code>unzip libtorch-cxx11-abi-shared-with-deps-*.zip -d ~/libtorch\n</code></pre>"},{"location":"getting_started/installation/#optional-set-environment-variables","title":"Optional: Set Environment Variables","text":"<pre><code>export CMAKE_PREFIX_PATH=~/libtorch/libtorch\nexport LD_LIBRARY_PATH=~/libtorch/libtorch/lib:$LD_LIBRARY_PATH\n</code></pre>"},{"location":"getting_started/installation/#step-3-build-xtorch","title":"Step 3: Build xTorch","text":""},{"location":"getting_started/installation/#clone-the-repo","title":"Clone the repo","text":"<pre><code>git clone &lt;your-xTorch-repo-url&gt;\ncd xtorch\n</code></pre>"},{"location":"getting_started/installation/#create-a-build-directory-and-configure","title":"Create a build directory and configure","text":"<pre><code>mkdir build &amp;&amp; cd build\ncmake -DCMAKE_PREFIX_PATH=~/libtorch/libtorch -DCMAKE_BUILD_TYPE=Release ..\n</code></pre>"},{"location":"getting_started/installation/#compile","title":"Compile","text":"<pre><code>make -j$(nproc)\n</code></pre>"},{"location":"getting_started/installation/#step-4-install-xtorch","title":"Step 4: Install xTorch","text":"<pre><code>sudo make install\nsudo ldconfig\n</code></pre>"},{"location":"getting_started/installation/#step-5-use-xtorch-in-your-project","title":"Step 5: Use xTorch in Your Project","text":""},{"location":"getting_started/installation/#with-cmake","title":"With CMake","text":"<pre><code>find_package(xTorch REQUIRED)\ntarget_link_libraries(MyApp PRIVATE xTorch::xTorch)\n</code></pre>"},{"location":"getting_started/installation/#manually-if-no-package-config","title":"Manually (if no package config)","text":"<pre><code>target_include_directories(MyApp PRIVATE /usr/local/include/xtorch)\ntarget_link_libraries(MyApp PRIVATE /usr/local/lib/libxTorch.so)\n</code></pre>"},{"location":"getting_started/installation/#notes","title":"Notes","text":"<ul> <li>Make sure all dependencies are installed.</li> <li>Recompile xTorch if you upgrade major dependencies.</li> <li>Use the correct ABI version of LibTorch for your system (C++11 recommended).</li> </ul> <p>Enjoy building deep learning apps in C++ with xTorch!</p>"},{"location":"getting_started/migration_guide/","title":"migration_guide.md","text":""},{"location":"getting_started/quickstart_tutorial/","title":"quickstart_tutorial.md","text":""},{"location":"tutorials/settings/","title":"Settings","text":""},{"location":"tutorials/advanced/cpp_extensions/","title":"cpp_extensions.md","text":""},{"location":"tutorials/advanced/jit_compilation/","title":"jit_compilation.md","text":""},{"location":"tutorials/basics/custom_layers/","title":"custom_layers.md","text":""},{"location":"tutorials/basics/hello_world/","title":"Hello World","text":""},{"location":"tutorials/basics/working_with_tensors/","title":"working_with_tensors.md","text":""},{"location":"tutorials/intermediate/gpu_acceleration/","title":"gpu_acceleration.md","text":""},{"location":"tutorials/intermediate/mixed_precision/","title":"mixed_precision.md","text":""}]}