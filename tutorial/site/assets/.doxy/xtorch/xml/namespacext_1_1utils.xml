<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacext_1_1utils" kind="namespace" language="C++">
    <compoundname>xt::utils</compoundname>
    <innernamespace refid="namespacext_1_1utils_1_1fs">xt::utils::fs</innernamespace>
    <innernamespace refid="namespacext_1_1utils_1_1string">xt::utils::string</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="downloader_8h_1af6fe48a8972880e464fb4cf4027c91a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; bool, std::string &gt;</type>
        <definition>std::tuple&lt; bool, std::string &gt; xt::utils::download</definition>
        <argsstring>(std::string &amp;url, std::string outPath)</argsstring>
        <name>download</name>
        <qualifiedname>xt::utils::download</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>url</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>outPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/utils/downloader.h" line="12" column="16" declfile="/home/kami/Documents/cpp/models/include/utils/downloader.h" declline="12" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="downloader_8h_1aed9caf0d026ac114ea00624b469cce1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string xt::utils::rebuild_google_drive_link</definition>
        <argsstring>(std::string gid)</argsstring>
        <name>rebuild_google_drive_link</name>
        <qualifiedname>xt::utils::rebuild_google_drive_link</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>gid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/utils/downloader.h" line="14" column="17" declfile="/home/kami/Documents/cpp/models/include/utils/downloader.h" declline="14" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="downloader_8h_1ac0b7e7a7c9709b0b1b52f09769c39a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; bool, std::string &gt;</type>
        <definition>std::tuple&lt; bool, std::string &gt; xt::utils::download_from_gdrive</definition>
        <argsstring>(std::string gid, std::string outPath)</argsstring>
        <name>download_from_gdrive</name>
        <qualifiedname>xt::utils::download_from_gdrive</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>gid</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>outPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/utils/downloader.h" line="16" column="16" declfile="/home/kami/Documents/cpp/models/include/utils/downloader.h" declline="16" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="extract_8h_1a0ae76584e88821e31789951fe59b1d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xt::utils::extractXZ</definition>
        <argsstring>(const std::string &amp;inputFile, const std::string &amp;outputFile)</argsstring>
        <name>extractXZ</name>
        <qualifiedname>xt::utils::extractXZ</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>inputFile</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outputFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/utils/extract.h" line="30" column="10" declfile="/home/kami/Documents/cpp/models/include/utils/extract.h" declline="30" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="extract_8h_1aceee7bce26833ec967a4de9917236659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; bool, string &gt;</type>
        <definition>std::tuple&lt; bool, string &gt; xt::utils::extractGzip</definition>
        <argsstring>(const std::string &amp;inFile, const std::string &amp;outFile=&quot;&quot;)</argsstring>
        <name>extractGzip</name>
        <qualifiedname>xt::utils::extractGzip</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFile</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outFile</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/utils/extract.h" line="32" column="16" declfile="/home/kami/Documents/cpp/models/include/utils/extract.h" declline="32" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="extract_8h_1ae7d9a9067070743d562c1396e3272efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xt::utils::extractTar</definition>
        <argsstring>(const std::string &amp;tarFile, const std::string &amp;outPath=&quot;./&quot;)</argsstring>
        <name>extractTar</name>
        <qualifiedname>xt::utils::extractTar</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>tarFile</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outPath</declname>
          <defval>&quot;./&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/utils/extract.h" line="34" column="10" declfile="/home/kami/Documents/cpp/models/include/utils/extract.h" declline="34" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="extract_8h_1a3740b983a7c3d3d81b044f6abd3f72c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xt::utils::extractZip</definition>
        <argsstring>(const std::string &amp;inFile, const std::string &amp;outPath=&quot;./&quot;)</argsstring>
        <name>extractZip</name>
        <qualifiedname>xt::utils::extractZip</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFile</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outPath</declname>
          <defval>&quot;./&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/utils/extract.h" line="36" column="10" declfile="/home/kami/Documents/cpp/models/include/utils/extract.h" declline="36" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="extract_8h_1a5e5b2f5daaff02d5cf1c6cefb3a984f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xt::utils::extractTgz</definition>
        <argsstring>(const std::string &amp;inFile, const std::string &amp;outPath=&quot;./&quot;)</argsstring>
        <name>extractTgz</name>
        <qualifiedname>xt::utils::extractTgz</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFile</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outPath</declname>
          <defval>&quot;./&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/utils/extract.h" line="38" column="10" declfile="/home/kami/Documents/cpp/models/include/utils/extract.h" declline="38" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="extract_8h_1a5be1a1b2c8ae065707f7adf516276b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool xt::utils::extract</definition>
        <argsstring>(const std::string &amp;inFile, const std::string &amp;outFile=&quot;&quot;)</argsstring>
        <name>extract</name>
        <qualifiedname>xt::utils::extract</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>inFile</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>outFile</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/utils/extract.h" line="40" column="10" declfile="/home/kami/Documents/cpp/models/include/utils/extract.h" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="md5_8h_1adab60546596f1f18530a76b61edc7971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string xt::utils::get_md5_checksum</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>get_md5_checksum</name>
        <qualifiedname>xt::utils::get_md5_checksum</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/utils/md5.h" line="11" column="17" declfile="/home/kami/Documents/cpp/models/include/utils/md5.h" declline="11" declcolumn="17"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/kami/Documents/cpp/models/include/utils/downloader.h" line="11" column="1"/>
  </compounddef>
</doxygen>
