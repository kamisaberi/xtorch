<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classxt_1_1data_1_1transforms_1_1Compose" kind="class" language="C++" prot="public">
    <compoundname>xt::data::transforms::Compose</compoundname>
    <includes refid="compose_8h" local="no">compose.h</includes>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classxt_1_1data_1_1transforms_1_1Compose_1a7577a6eac92063cde3d6021715b12377" prot="public" static="no">
        <type>std::function&lt; torch::Tensor(torch::Tensor)&gt;</type>
        <definition>using xt::data::transforms::Compose::TransformFunc =  std::function&lt;torch::Tensor(torch::Tensor)&gt;</definition>
        <argsstring></argsstring>
        <name>TransformFunc</name>
        <qualifiedname>xt::data::transforms::Compose::TransformFunc</qualifiedname>
        <briefdescription>
<para>Alias for a transformation function that takes a tensor and returns a tensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This type alias defines a function signature for transformations that operate on <computeroutput>torch::Tensor</computeroutput> objects, enabling flexible composition of operations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/transforms/compose.h" line="25" column="9" bodyfile="/home/kami/Documents/cpp/models/include/transforms/compose.h" bodystart="25" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classxt_1_1data_1_1transforms_1_1Compose_1a9b8d46444af7b010a6a714c0689a7b0d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classxt_1_1data_1_1transforms_1_1Compose_1a7577a6eac92063cde3d6021715b12377" kindref="member">TransformFunc</ref> &gt;</type>
        <definition>std::vector&lt;TransformFunc&gt; xt::data::transforms::Compose::transforms</definition>
        <argsstring></argsstring>
        <name>transforms</name>
        <qualifiedname>xt::data::transforms::Compose::transforms</qualifiedname>
        <briefdescription>
<para>Vector storing the sequence of transformation functions. </para>
        </briefdescription>
        <detaileddescription>
<para>This member holds the list of transformations to be applied when the object is called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/transforms/compose.h" line="59" column="21" bodyfile="/home/kami/Documents/cpp/models/include/transforms/compose.h" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classxt_1_1data_1_1transforms_1_1Compose_1ad7d277db74572350bcd2d008bfd6b845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::data::transforms::Compose::Compose</definition>
        <argsstring>()</argsstring>
        <name>Compose</name>
        <qualifiedname>xt::data::transforms::Compose::Compose</qualifiedname>
        <briefdescription>
<para>Default constructor, initializing an empty transformation pipeline. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classxt_1_1data_1_1transforms_1_1Compose" kindref="compound">Compose</ref> object with no transformations, allowing subsequent addition of transforms if needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/transforms/compose.h" line="33" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classxt_1_1data_1_1transforms_1_1Compose_1abba2130edfe936c3e1f7054cb01d0f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::data::transforms::Compose::Compose</definition>
        <argsstring>(std::vector&lt; TransformFunc &gt; transforms)</argsstring>
        <name>Compose</name>
        <qualifiedname>xt::data::transforms::Compose::Compose</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classxt_1_1data_1_1transforms_1_1Compose_1a7577a6eac92063cde3d6021715b12377" kindref="member">TransformFunc</ref> &gt;</type>
          <declname>transforms</declname>
        </param>
        <briefdescription>
<para>Constructs a <ref refid="classxt_1_1data_1_1transforms_1_1Compose" kindref="compound">Compose</ref> object with a vector of transformation functions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transforms</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of <ref refid="classxt_1_1data_1_1transforms_1_1Compose_1a7577a6eac92063cde3d6021715b12377" kindref="member">TransformFunc</ref> objects specifying the sequence of transformations.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Initializes the <ref refid="classxt_1_1data_1_1transforms_1_1Compose" kindref="compound">Compose</ref> object with a predefined set of transformations to be applied in order. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/transforms/compose.h" line="41" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classxt_1_1data_1_1transforms_1_1Compose_1a40074254792ab21a36ca2b64666cd2d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::data::transforms::Compose::operator()</definition>
        <argsstring>(torch::Tensor input) const</argsstring>
        <name>operator()</name>
        <qualifiedname>xt::data::transforms::Compose::operator()</qualifiedname>
        <param>
          <type>torch::Tensor</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Applies the sequence of transformations to the input tensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input tensor to be transformed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tensor resulting from applying all transformations in sequence.</para>
</simplesect>
This operator applies each transformation in the <computeroutput>transforms</computeroutput> vector to the input tensor, passing the output of one transformation as the input to the next, and returns the final result. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/transforms/compose.h" line="51" column="23"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A class to compose multiple tensor transformations into a single callable pipeline. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classxt_1_1data_1_1transforms_1_1Compose" kindref="compound">Compose</ref> class allows chaining of multiple transformation functions, each operating on a <computeroutput>torch::Tensor</computeroutput>, into a single operation. It is designed to facilitate preprocessing or augmentation of tensor data (e.g., images) by applying a sequence of transforms in the order they are provided. The transformations are stored as a vector of function objects and applied via the call operator. </para>
    </detaileddescription>
    <location file="/home/kami/Documents/cpp/models/include/transforms/compose.h" line="17" column="5" bodyfile="/home/kami/Documents/cpp/models/include/transforms/compose.h" bodystart="17" bodyend="60"/>
    <listofallmembers>
      <member refid="classxt_1_1data_1_1transforms_1_1Compose_1ad7d277db74572350bcd2d008bfd6b845" prot="public" virt="non-virtual"><scope>xt::data::transforms::Compose</scope><name>Compose</name></member>
      <member refid="classxt_1_1data_1_1transforms_1_1Compose_1abba2130edfe936c3e1f7054cb01d0f05" prot="public" virt="non-virtual"><scope>xt::data::transforms::Compose</scope><name>Compose</name></member>
      <member refid="classxt_1_1data_1_1transforms_1_1Compose_1a40074254792ab21a36ca2b64666cd2d3" prot="public" virt="non-virtual"><scope>xt::data::transforms::Compose</scope><name>operator()</name></member>
      <member refid="classxt_1_1data_1_1transforms_1_1Compose_1a7577a6eac92063cde3d6021715b12377" prot="public" virt="non-virtual"><scope>xt::data::transforms::Compose</scope><name>TransformFunc</name></member>
      <member refid="classxt_1_1data_1_1transforms_1_1Compose_1a9b8d46444af7b010a6a714c0689a7b0d" prot="private" virt="non-virtual"><scope>xt::data::transforms::Compose</scope><name>transforms</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
