<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="structxt_1_1models_1_1ResNet" kind="struct" language="C++" prot="public">
    <compoundname>xt::models::ResNet</compoundname>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <basecompoundref refid="classxt_1_1models_1_1BaseModel" prot="public" virt="non-virtual">xt::models::BaseModel</basecompoundref>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structxt_1_1models_1_1ResNet_1a8b0cf6e1294a5a8e22756e2acb9df233" prot="public" static="no" mutable="yes">
        <type>int</type>
        <definition>int xt::models::ResNet::inplanes</definition>
        <argsstring></argsstring>
        <name>inplanes</name>
        <qualifiedname>xt::models::ResNet::inplanes</qualifiedname>
        <initializer>= 64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="28" column="21" bodyfile="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structxt_1_1models_1_1ResNet_1a76b33ce76d628f5ec9e5094a1bb17e99" prot="public" static="no" mutable="yes">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::conv1</definition>
        <argsstring></argsstring>
        <name>conv1</name>
        <qualifiedname>xt::models::ResNet::conv1</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="29" column="39" bodyfile="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structxt_1_1models_1_1ResNet_1a5452007a173d7287b08abc77ad789c9e" prot="public" static="no" mutable="yes">
        <type>torch::nn::MaxPool2d</type>
        <definition>torch::nn::MaxPool2d xt::models::ResNet::maxpool</definition>
        <argsstring></argsstring>
        <name>maxpool</name>
        <qualifiedname>xt::models::ResNet::maxpool</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="30" column="38" bodyfile="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structxt_1_1models_1_1ResNet_1ad69ba19221c845d8d2de636e15f26179" prot="public" static="no" mutable="yes">
        <type>torch::nn::AvgPool2d</type>
        <definition>torch::nn::AvgPool2d xt::models::ResNet::avgpool</definition>
        <argsstring></argsstring>
        <name>avgpool</name>
        <qualifiedname>xt::models::ResNet::avgpool</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="31" column="38" bodyfile="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structxt_1_1models_1_1ResNet_1a517f61ca1318ff9414d0a565a426f17a" prot="public" static="no" mutable="yes">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::layer0</definition>
        <argsstring></argsstring>
        <name>layer0</name>
        <qualifiedname>xt::models::ResNet::layer0</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="33" column="39" bodyfile="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structxt_1_1models_1_1ResNet_1a4e334e464b733f36f8c095679a2e219e" prot="public" static="no" mutable="no">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::layer1</definition>
        <argsstring></argsstring>
        <name>layer1</name>
        <qualifiedname>xt::models::ResNet::layer1</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="33" column="47" bodyfile="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structxt_1_1models_1_1ResNet_1ac1260be6cc061afc13029e3a3fc16b8a" prot="public" static="no" mutable="no">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::layer2</definition>
        <argsstring></argsstring>
        <name>layer2</name>
        <qualifiedname>xt::models::ResNet::layer2</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="33" column="55" bodyfile="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structxt_1_1models_1_1ResNet_1ac219086dc8e1fa097f2157de0f9ab5d9" prot="public" static="no" mutable="no">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::layer3</definition>
        <argsstring></argsstring>
        <name>layer3</name>
        <qualifiedname>xt::models::ResNet::layer3</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="33" column="63" bodyfile="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structxt_1_1models_1_1ResNet_1ae0bc1275b3993fa2f59ace909fd6aeda" prot="public" static="no" mutable="yes">
        <type>torch::nn::Linear</type>
        <definition>torch::nn::Linear xt::models::ResNet::fc</definition>
        <argsstring></argsstring>
        <name>fc</name>
        <qualifiedname>xt::models::ResNet::fc</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="34" column="35" bodyfile="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" bodystart="34" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet-rs.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet-rs.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet-rs.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet-rs.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet-v1.5.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet-v1.5.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet-v1.5.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet-v1.5.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet101.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet101.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet101.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet101.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet1202.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet1202.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet1202.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet1202.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet152.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet152.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet152.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet152.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet18.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet18.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet18.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet18.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet200.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet200.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet200.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet200.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet34.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet34.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet34.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet34.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet50.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet50.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet50.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnet50.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnext.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnext.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnext.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/resnext.h" line="42" column="23"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(vector&lt; int &gt; layers, int num_classes=10, int in_channels=3)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/wide-resnet.h" line="36" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::models::ResNet::ResNet</definition>
        <argsstring>(std::vector&lt; int &gt; layers, int num_classes, int in_channels, std::vector&lt; int64_t &gt; input_shape)</argsstring>
        <name>ResNet</name>
        <qualifiedname>xt::models::ResNet::ResNet</qualifiedname>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>layers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_classes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>in_channels</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>input_shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/wide-resnet.h" line="38" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::nn::Sequential</type>
        <definition>torch::nn::Sequential xt::models::ResNet::makeLayerFromResidualBlock</definition>
        <argsstring>(int planes, int blocks, int stride=1)</argsstring>
        <name>makeLayerFromResidualBlock</name>
        <qualifiedname>xt::models::ResNet::makeLayerFromResidualBlock</qualifiedname>
        <param>
          <type>int</type>
          <declname>planes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stride</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/wide-resnet.h" line="40" column="31"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::models::ResNet::forward</definition>
        <argsstring>(torch::Tensor x) const override</argsstring>
        <name>forward</name>
        <qualifiedname>xt::models::ResNet::forward</qualifiedname>
        <reimplements refid="classxt_1_1models_1_1BaseModel_1a575d29b32b0aaeacbd1b82d19dc23e36">forward</reimplements>
        <param>
          <type>torch::Tensor</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/wide-resnet.h" line="42" column="23"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>torch::nn::Module</label>
      </node>
      <node id="2">
        <label>xt::models::BaseModel</label>
        <link refid="classxt_1_1models_1_1BaseModel"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>xt::models::ResNet</label>
        <link refid="structxt_1_1models_1_1ResNet"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>torch::nn::Module</label>
      </node>
      <node id="2">
        <label>xt::models::BaseModel</label>
        <link refid="classxt_1_1models_1_1BaseModel"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>xt::models::ResNet</label>
        <link refid="structxt_1_1models_1_1ResNet"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" line="27" column="5" bodyfile="/home/kami/Documents/cpp/models/include/models/cnn/resnet/res2net.h" bodystart="27" bodyend="43"/>
    <listofallmembers>
      <member refid="structxt_1_1models_1_1ResNet_1ad69ba19221c845d8d2de636e15f26179" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>avgpool</name></member>
      <member refid="classxt_1_1models_1_1BaseModel_1a424b9786408b930036de62233b6dd1f3" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>BaseModel</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a76b33ce76d628f5ec9e5094a1bb17e99" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>conv1</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ae0bc1275b3993fa2f59ace909fd6aeda" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>fc</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a452bb43818b302b2b7e0e128e4991f70" prot="public" virt="virtual"><scope>xt::models::ResNet</scope><name>forward</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a8b0cf6e1294a5a8e22756e2acb9df233" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>inplanes</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a517f61ca1318ff9414d0a565a426f17a" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>layer0</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a4e334e464b733f36f8c095679a2e219e" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>layer1</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ac1260be6cc061afc13029e3a3fc16b8a" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>layer2</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ac219086dc8e1fa097f2157de0f9ab5d9" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>layer3</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a0850db244dcc5373c9245d03d18decd2" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>makeLayerFromResidualBlock</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a5452007a173d7287b08abc77ad789c9e" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>maxpool</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1a2a5093c740a1ab460e3e3548ce02ea6c" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
      <member refid="structxt_1_1models_1_1ResNet_1ad59dd637aba43df9e26c1bfeb01e234d" prot="public" virt="non-virtual"><scope>xt::models::ResNet</scope><name>ResNet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
