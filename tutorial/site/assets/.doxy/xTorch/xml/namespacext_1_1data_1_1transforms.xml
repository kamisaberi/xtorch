<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacext_1_1data_1_1transforms" kind="namespace" language="C++">
    <compoundname>xt::data::transforms</compoundname>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1CenterCrop" prot="public">xt::data::transforms::CenterCrop</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1ColorJitter" prot="public">xt::data::transforms::ColorJitter</innerclass>
    <innerclass refid="classxt_1_1data_1_1transforms_1_1Compose" prot="public">xt::data::transforms::Compose</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1Cutout" prot="public">xt::data::transforms::Cutout</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1GaussianBlur" prot="public">xt::data::transforms::GaussianBlur</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1GaussianBlurOpenCV" prot="public">xt::data::transforms::GaussianBlurOpenCV</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1GaussianNoise" prot="public">xt::data::transforms::GaussianNoise</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1Grayscale" prot="public">xt::data::transforms::Grayscale</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1GrayscaleToRGB" prot="public">xt::data::transforms::GrayscaleToRGB</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1HorizontalFlip" prot="public">xt::data::transforms::HorizontalFlip</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1Lambda" prot="public">xt::data::transforms::Lambda</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1Normalize" prot="public">xt::data::transforms::Normalize</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1Pad" prot="public">xt::data::transforms::Pad</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1RandomCrop" prot="public">xt::data::transforms::RandomCrop</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1RandomCrop2" prot="public">xt::data::transforms::RandomCrop2</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1RandomFlip" prot="public">xt::data::transforms::RandomFlip</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1RandomGaussianBlur" prot="public">xt::data::transforms::RandomGaussianBlur</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1Resize" prot="public">xt::data::transforms::Resize</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1Rotation" prot="public">xt::data::transforms::Rotation</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1ToGray" prot="public">xt::data::transforms::ToGray</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1ToTensor" prot="public">xt::data::transforms::ToTensor</innerclass>
    <innerclass refid="structxt_1_1data_1_1transforms_1_1VerticalFlip" prot="public">xt::data::transforms::VerticalFlip</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="definitions_2transforms_8h_1a670a8345769e51284533084a1346a780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::function&lt; torch::Tensor(torch::Tensor input)&gt;</type>
        <definition>std::function&lt; torch::Tensor(torch::Tensor input)&gt; xt::data::transforms::create_resize_transform</definition>
        <argsstring>(std::vector&lt; int64_t &gt; size)</argsstring>
        <name>create_resize_transform</name>
        <qualifiedname>xt::data::transforms::create_resize_transform</qualifiedname>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/definitions/transforms.h" line="7" column="19" declfile="/home/kami/Documents/cpp/models/include/definitions/transforms.h" declline="7" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="definitions_2transforms_8h_1af0ebe2864a985d15dc089d9dde57e0ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::data::transforms::resize_tensor</definition>
        <argsstring>(const torch::Tensor &amp;tensor, const std::vector&lt; int64_t &gt; &amp;size)</argsstring>
        <name>resize_tensor</name>
        <qualifiedname>xt::data::transforms::resize_tensor</qualifiedname>
        <param>
          <type>const torch::Tensor &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/definitions/transforms.h" line="9" column="19" declfile="/home/kami/Documents/cpp/models/include/definitions/transforms.h" declline="9" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="definitions_2transforms_8h_1aa73bae6ac5af9e3a6ff3975c5bc7c01d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::data::transforms::Lambda&lt; torch::data::Example&lt;&gt; &gt;</type>
        <definition>torch::data::transforms::Lambda&lt; torch::data::Example&lt;&gt; &gt; xt::data::transforms::resize</definition>
        <argsstring>(std::vector&lt; int64_t &gt; size)</argsstring>
        <name>resize</name>
        <qualifiedname>xt::data::transforms::resize</qualifiedname>
        <param>
          <type>std::vector&lt; int64_t &gt;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/definitions/transforms.h" line="11" column="37" declfile="/home/kami/Documents/cpp/models/include/definitions/transforms.h" declline="11" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="definitions_2transforms_8h_1a811f8922567b18a65a98f479e1ad1606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::data::transforms::Lambda&lt; torch::data::Example&lt;&gt; &gt;</type>
        <definition>torch::data::transforms::Lambda&lt; torch::data::Example&lt;&gt; &gt; xt::data::transforms::normalize</definition>
        <argsstring>(double mean, double stddev)</argsstring>
        <name>normalize</name>
        <qualifiedname>xt::data::transforms::normalize</qualifiedname>
        <param>
          <type>double</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>double</type>
          <declname>stddev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/definitions/transforms.h" line="13" column="37" declfile="/home/kami/Documents/cpp/models/include/definitions/transforms.h" declline="13" declcolumn="37"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/kami/Documents/cpp/models/include/definitions/transforms.h" line="6" column="1"/>
  </compounddef>
</doxygen>
