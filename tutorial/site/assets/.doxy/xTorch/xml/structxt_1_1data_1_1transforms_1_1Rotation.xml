<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="structxt_1_1data_1_1transforms_1_1Rotation" kind="struct" language="C++" prot="public">
    <compoundname>xt::data::transforms::Rotation</compoundname>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structxt_1_1data_1_1transforms_1_1Rotation_1a8ec9b77b436c1e66c61621b0a16621c1" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double xt::data::transforms::Rotation::angle</definition>
        <argsstring></argsstring>
        <name>angle</name>
        <qualifiedname>xt::data::transforms::Rotation::angle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/transforms/rotation.h" line="13" column="20" bodyfile="/home/kami/Documents/cpp/models/include/transforms/rotation.h" bodystart="13" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structxt_1_1data_1_1transforms_1_1Rotation_1aacbabe4c22ce3b3042240c83d44c56aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>xt::data::transforms::Rotation::Rotation</definition>
        <argsstring>(double angle_deg)</argsstring>
        <name>Rotation</name>
        <qualifiedname>xt::data::transforms::Rotation::Rotation</qualifiedname>
        <param>
          <type>double</type>
          <declname>angle_deg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/transforms/rotation.h" line="8" column="9"/>
      </memberdef>
      <memberdef kind="function" id="structxt_1_1data_1_1transforms_1_1Rotation_1a7ce956dc22c18b382067dd51185c2b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor xt::data::transforms::Rotation::operator()</definition>
        <argsstring>(const torch::Tensor &amp;input_tensor)</argsstring>
        <name>operator()</name>
        <qualifiedname>xt::data::transforms::Rotation::operator()</qualifiedname>
        <param>
          <type>const torch::Tensor &amp;</type>
          <declname>input_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kami/Documents/cpp/models/include/transforms/rotation.h" line="10" column="23"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/kami/Documents/cpp/models/include/transforms/rotation.h" line="6" column="5" bodyfile="/home/kami/Documents/cpp/models/include/transforms/rotation.h" bodystart="6" bodyend="14"/>
    <listofallmembers>
      <member refid="structxt_1_1data_1_1transforms_1_1Rotation_1a8ec9b77b436c1e66c61621b0a16621c1" prot="private" virt="non-virtual"><scope>xt::data::transforms::Rotation</scope><name>angle</name></member>
      <member refid="structxt_1_1data_1_1transforms_1_1Rotation_1a7ce956dc22c18b382067dd51185c2b89" prot="public" virt="non-virtual"><scope>xt::data::transforms::Rotation</scope><name>operator()</name></member>
      <member refid="structxt_1_1data_1_1transforms_1_1Rotation_1aacbabe4c22ce3b3042240c83d44c56aa" prot="public" virt="non-virtual"><scope>xt::data::transforms::Rotation</scope><name>Rotation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
