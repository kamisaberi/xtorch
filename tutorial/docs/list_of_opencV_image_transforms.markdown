| **Category**                | **Transform**                              | **Description**                                                                 | **Primary OpenCV Function(s)**                     | **Available in C++ API?** |
|-----------------------------|--------------------------------------------|--------------------------------------------------------------------------------|---------------------------------------------------|---------------------------|
| **Geometric Transformations** | Resize                                    | Scales an image to a specified size or by a scaling factor. Supports interpolation methods (e.g., INTER_LINEAR, INTER_CUBIC). | `cv::resize`                                      | Yes                       |
|                             | Translation                               | Shifts an image by a specified (x, y) offset using an affine transformation matrix. | `cv::warpAffine`                                  | Yes                       |
|                             | Rotation                                  | Rotates an image around a specified center by an angle, with optional scaling.   | `cv::getRotationMatrix2D`, `cv::warpAffine`       | Yes                       |
|                             | Affine Transformation                     | Applies a general affine transformation (e.g., rotation, translation, scaling, shearing) using a 2x3 matrix. | `cv::getAffineTransform`, `cv::warpAffine`        | Yes                       |
|                             | Perspective Transformation                | Applies a perspective transformation using a 3x3 matrix, useful for correcting distortions or changing viewpoints. | `cv::getPerspectiveTransform`, `cv::warpPerspective` | Yes                       |
|                             | Remap                                     | Applies a generic mapping of pixels using x and y map arrays, allowing arbitrary transformations. | `cv::remap`                                       | Yes                       |
|                             | Polar Transform                           | Maps an image to polar or semi-log polar coordinates, useful for radial effects. | `cv::remap` (with custom maps)                    | Yes                       |
|                             | Undistort                                 | Corrects lens distortion (radial and tangential) using camera intrinsics and distortion coefficients. | `cv::undistort`, `cv::initUndistortRectifyMap`    | Yes                       |
|                             | Sub-Pixel Rectangle Extraction            | Extracts a rectangular patch at sub-pixel accuracy using bilinear interpolation. | `cv::getRectSubPix`                               | Yes                       |
| **Color and Intensity**     | Color Space Conversion                    | Converts an image between color spaces (e.g., BGR to RGB, HSV, LAB, Grayscale). | `cv::cvtColor`                                    | Yes                       |
|                             | Brightness/Contrast Adjustment            | Adjusts image brightness and contrast by scaling and shifting pixel values.     | `cv::convertScaleAbs`                             | Yes                       |
|                             | Gamma Correction                          | Applies a power-law transformation to adjust image gamma (non-linear brightness). | Custom (e.g., `cv::LUT` or manual computation)    | Yes                       |
|                             | Channel Splitting                         | Splits an image into its color channels (e.g., B, G, R).                        | `cv::split`                                       | Yes                       |
|                             | Channel Merging                           | Merges individual channels into a multi-channel image.                          | `cv::merge`                                       | Yes                       |
|                             | Alpha Blending                            | Blends two images using weights for each image’s contribution.                  | `cv::addWeighted`                                 | Yes                       |
| **Thresholding**            | Global Thresholding                       | Applies a fixed threshold to convert an image to binary (e.g., pixels above threshold become max value). | `cv::threshold`                                   | Yes                       |
|                             | Adaptive Thresholding                     | Applies a locally adaptive threshold based on neighborhood statistics.           | `cv::adaptiveThreshold`                           | Yes                       |
|                             | Otsu’s Thresholding                       | Automatically determines an optimal threshold using Otsu’s method.              | `cv::threshold` (with `THRESH_OTSU`)              | Yes                       |
| **Filtering and Blurring**  | Gaussian Blur                             | Applies a Gaussian blur to smooth an image, reducing noise or detail.           | `cv::GaussianBlur`                                | Yes                       |
|                             | Median Blur                               | Applies a median filter to reduce salt-and-pepper noise while preserving edges. | `cv::medianBlur`                                  | Yes                       |
|                             | Bilateral Filter                          | Applies an edge-preserving smoothing filter.                                    | `cv::bilateralFilter`                             | Yes                       |
|                             | Box Filter                                | Applies a linear box filter (average) to blur an image.                        | `cv::boxFilter`                                   | Yes                       |
|                             | Morphological Transformations             | Applies operations like erosion, dilation, opening, or closing using a structuring element. | `cv::morphologyEx`, `cv::erode`, `cv::dilate`     | Yes                       |
| **Frequency Domain**        | Discrete Fourier Transform (DFT)           | Computes the Fourier Transform of an image for frequency domain analysis.       | `cv::dft`                                         | Yes                       |
|                             | Inverse DFT                               | Reconstructs an image from its frequency domain representation.                 | `cv::dft` (with `DFT_INVERSE`)                    | Yes                       |
|                             | Magnitude/Phase Computation               | Computes the magnitude or phase of a complex image (e.g., DFT output).         | `cv::magnitude`, `cv::phase`                      | Yes                       |
| **Distance Transform**      | Distance Transform                        | Computes the distance from each pixel to the nearest zero pixel in a binary image. | `cv::distanceTransform`                           | Yes                       |
| **Bitwise Operations**      | Bitwise AND/OR/XOR/NOT                    | Performs bitwise operations on images, useful for masking or combining regions. | `cv::bitwise_and`, `cv::bitwise_or`, `cv::bitwise_xor`, `cv::bitwise_not` | Yes                       |
| **Arithmetic Operations**   | Add                                       | Adds two images or an image and a scalar, with saturation at 255.               | `cv::add`                                         | Yes                       |
|                             | Subtract                                  | Subtracts one image from another or a scalar from an image, with saturation at 0. | `cv::subtract`                                    | Yes                       |
|                             | Multiply                                  | Multiplies two images or an image by a scalar, element-wise.                    | `cv::multiply`                                    | Yes                       |
|                             | Divide                                    | Divides one image by another or by a scalar, element-wise.                      | `cv::divide`                                      | Yes                       |
|                             | Absolute Difference                       | Computes the absolute difference between two images.                            | `cv::absdiff`                                     | Yes                       |
| **Miscellaneous**           | Flip                                      | Flips an image horizontally, vertically, or both.                               | `cv::flip`                                        | Yes                       |
|                             | Connected Components                      | Labels connected regions in a binary image, useful for segmentation.           | `cv::connectedComponents`, `cv::connectedComponentsWithStats` | Yes                       |
|                             | Flood Fill                                | Fills a connected region with a specified color, starting from a seed point.   | `cv::floodFill`                                   | Yes                       |
|                             | Watershed Segmentation                    | Segments an image into regions using the watershed algorithm.                   | `cv::watershed`                                   | Yes                       |
|                             | GrabCut Segmentation                      | Performs interactive foreground-background segmentation using GrabCut.          | `cv::grabCut`                                     | Yes                       |
|                             | Lookup Table (LUT)                        | Applies a user-defined mapping to pixel values (e.g., for contrast stretching). | `cv::LUT`                                         | Yes                       |
|                             | Integral Image                            | Computes the integral (summed area) image for fast region sum calculations.     | `cv::integral`                                    | Yes                       |